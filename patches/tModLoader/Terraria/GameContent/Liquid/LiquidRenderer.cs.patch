--- src/TerrariaNetCore/Terraria/GameContent/Liquid/LiquidRenderer.cs
+++ src/tModLoader/Terraria/GameContent/Liquid/LiquidRenderer.cs
@@ -5,6 +_,7 @@
 using Terraria.Graphics;
 using Terraria.ID;
 using Terraria.Utilities;
+using Terraria.ModLoader;
 
 namespace Terraria.GameContent.Liquid;
 
@@ -33,8 +_,8 @@
 		public float VisibleRightWall;
 		public float VisibleBottomWall;
 		public float VisibleTopWall;
-		public byte Type;
+		public ushort Type;
-		public byte VisibleType;
+		public ushort VisibleType;
 	}
 
 	private struct LiquidDrawCache
@@ -43,7 +_,7 @@
 		public Vector2 LiquidOffset;
 		public bool IsVisible;
 		public float Opacity;
-		public byte Type;
+		public ushort Type;
 		public bool IsSurfaceLiquid;
 		public bool HasWall;
 	}
@@ -56,7 +_,7 @@
 		public Vector2 LiquidOffset;
 		public bool IsVisible;
 		public float Opacity;
-		public byte Type;
+		public ushort Type;
 		public bool IsSurfaceLiquid;
 		public bool HasWall;
 	}
@@ -64,20 +_,20 @@
 	private const int ANIMATION_FRAME_COUNT = 16;
 	private const int CACHE_PADDING = 2;
 	private const int CACHE_PADDING_2 = 4;
-	private static readonly int[] WATERFALL_LENGTH = new int[4] {
+	internal static int[] WATERFALL_LENGTH = new int[4] {
 		10,
 		3,
 		2,
 		10
 	};
-	private static readonly float[] DEFAULT_OPACITY = new float[4] {
+	internal static float[] DEFAULT_OPACITY = new float[4] {
 		0.6f,
 		0.95f,
 		0.95f,
 		0.75f
 	};
-	private static readonly byte[] WAVE_MASK_STRENGTH = new byte[5];
+	internal static byte[] WAVE_MASK_STRENGTH = new byte[5];
-	private static readonly byte[] VISCOSITY_MASK = new byte[5] {
+	internal static byte[] VISCOSITY_MASK = new byte[5] {
 		0,
 		200,
 		240,
@@ -86,7 +_,7 @@
 	};
 	public const float MIN_LIQUID_SIZE = 0.25f;
 	public static LiquidRenderer Instance;
-	private readonly Asset<Texture2D>[] _liquidTextures = new Asset<Texture2D>[15];
+	public Asset<Texture2D>[] _liquidTextures = new Asset<Texture2D>[15];
 	private LiquidCache[] _cache = new LiquidCache[1];
 	private LiquidDrawCache[] _drawCache = new LiquidDrawCache[1];
 	private SpecialLiquidDrawCache[] _drawCacheForShimmer = new SpecialLiquidDrawCache[1];
@@ -96,7 +_,9 @@
 	private Color[] _waveMask = new Color[1];
 	private float _frameState;
 
+	/*
 	private static Tile[,] Tiles => Main.tile;
+	*/
 
 	public event Action<Color[], Rectangle> WaveFilters;
 
@@ -131,20 +_,24 @@
 		if (_waveMask.Length < drawArea.Width * drawArea.Height)
 			_waveMask = new Color[drawArea.Width * drawArea.Height];
 
-		Tile tile = null;
+		Tile tile = default;
 		fixed (LiquidCache* ptr = &_cache[1]) {
 			LiquidCache* ptr2 = ptr;
 			int num = rectangle.Height * 2 + 2;
 			ptr2 = ptr;
 			for (int i = rectangle.X; i < rectangle.X + rectangle.Width; i++) {
 				for (int j = rectangle.Y; j < rectangle.Y + rectangle.Height; j++) {
-					tile = Tiles[i, j];
+					tile = Main.tile[i, j];
 					if (tile == null)
 						tile = new Tile();
 
 					ptr2->LiquidLevel = (float)(int)tile.liquid / 255f;
 					ptr2->IsHalfBrick = tile.halfBrick() && ptr2[-1].HasLiquid && !TileID.Sets.Platforms[tile.type];
+					/*
 					ptr2->IsSolid = WorldGen.SolidOrSlopedTile(tile);
+					*/
+					bool notSolid = !WorldGen.SolidOrSlopedTile(tile);
+					ptr2->IsSolid = !LiquidLoader.ShouldDrawLiquids(i, j, notSolid);
 					ptr2->HasLiquid = tile.liquid != 0;
 					ptr2->VisibleLiquidLevel = 0f;
 					ptr2->HasWall = tile.wall != 0;
